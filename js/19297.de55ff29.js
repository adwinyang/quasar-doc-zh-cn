"use strict";(globalThis["webpackChunkquasar_dev"]=globalThis["webpackChunkquasar_dev"]||[]).push([[19297],{19297:(e,t,s)=>{s.r(t),s.d(t,{default:()=>h});var a=s(83673);const i=(0,a._)("p",null,[(0,a.Uk)("QResizeObserver is a Quasar component that emits a "),(0,a._)("code",{class:"doc-token"},"resize"),(0,a.Uk)(" event whenever the wrapping DOM element / component (defined as direct parent of QResizeObserver) changes its size (width and/or height). Note that no polling is involved, but overusing it is costly too.")],-1),r=(0,a._)("p",null,"Please note that QResizeObserver will issue an event as soon as it gets rendered and attached to DOM, so you can have the initial size of the container.",-1);function o(e,t,s,o,n,c){const l=(0,a.up)("doc-api"),d=(0,a.up)("doc-example"),h=(0,a.up)("doc-page");return(0,a.wg)(),(0,a.j4)(h,{"meta-title":o.metaTitle,title:"Resize Observer (for Element)",related:o.related,toc:o.toc,"meta-desc":o.metaDesc},{default:(0,a.w5)((()=>[i,(0,a._)("h2",{id:"qresizeobserver-api",class:"doc-heading doc-h2",onClick:t[0]||(t[0]=e=>o.copyHeading("qresizeobserver-api"))},"QResizeObserver API"),(0,a.Wm)(l,{file:"QResizeObserver"}),(0,a._)("h2",{id:"usage",class:"doc-heading doc-h2",onClick:t[1]||(t[1]=e=>o.copyHeading("usage"))},"Usage"),(0,a.Wm)(d,{title:"Basic",file:"QResizeObserver/Basic"}),r])),_:1},8,["meta-title","related","toc","meta-desc"])}var n=s(17536);const c={name:"DocMarkdownPage",setup(){return{metaTitle:"Resize Observer (for Element)",metaDesc:"The QResizeObserver Vue component emits a 'resize' event whenever the wrapping DOM element changes its width or height.",related:[{name:"滚动监听器",category:"监听器(观察者)",path:"/vue-components/scroll-observer"}],toc:[{id:"qresizeobserver-api",title:"QResizeObserver API"},{id:"usage",title:"Usage"}],copyHeading:n.Et}}};var l=s(74260);const d=(0,l.Z)(c,[["render",o]]),h=d}}]);