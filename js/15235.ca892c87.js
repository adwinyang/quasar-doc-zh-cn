"use strict";(globalThis["webpackChunkquasar_dev"]=globalThis["webpackChunkquasar_dev"]||[]).push([[15235],{15235:(e,o,n)=>{n.r(o),n.d(o,{default:()=>F});var s=n(83673);const t=(0,s.Uk)("Take a look at our "),a=(0,s.Uk)("Client Side Hydration"),r=(0,s.Uk)(" page. When you get hydration errors, it means the HTML rendered on the server does not match the equivalent HTML rendered on client-side. This error will appear only when developing (and NOT on production) and it definitely needs to be addressed, before you release your website. Is there some content that you can only generate on client-side? Then use "),i=(0,s.Uk)("QNoSsr"),l=(0,s.Uk)("."),c=(0,s._)("p",null,[(0,s.Uk)("When building for SSR, use only the "),(0,s._)("code",{class:"doc-token"},"$q.platform"),(0,s.Uk)("/"),(0,s._)("code",{class:"doc-token"},"$q.cookies"),(0,s.Uk)(" form. If you need to use the "),(0,s._)("code",{class:"doc-token"},"import Platform from 'quasar/src/plugins/Platform.js';import Cookies from 'quasar/src/plugins/Cookies.js';"),(0,s.Uk)(" (when on server-side), then you’ll need to do it like this:")],-1),d=(0,s._)("pre",{class:"doc-code language-js"},[(0,s._)("code",{class:"doc-code__inner doc-code__inner--prerendered language-js"},[(0,s._)("span",{class:"token comment"},"// example with Platform; same thing for Cookies"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token keyword"},"import"),(0,s.Uk)(),(0,s._)("span",{class:"token punctuation"},"{"),(0,s.Uk)(" Platform "),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)(),(0,s._)("span",{class:"token keyword"},"from"),(0,s.Uk)(),(0,s._)("span",{class:"token string"},"'quasar'"),(0,s.Uk)("\n\n"),(0,s._)("span",{class:"token comment"},"// you need access to `ssrContext`"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token keyword"},"function"),(0,s.Uk)(),(0,s._)("span",{class:"token punctuation"},"("),(0,s._)("span",{class:"token parameter"},"ssrContext"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)(),(0,s._)("span",{class:"token punctuation"},"{"),(0,s.Uk)("\n  "),(0,s._)("span",{class:"token keyword"},"const"),(0,s.Uk)(" platform "),(0,s._)("span",{class:"token operator"},"="),(0,s.Uk)(" process"),(0,s._)("span",{class:"token punctuation"},"."),(0,s.Uk)("env"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token constant"},"SERVER"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token operator"},"?"),(0,s.Uk)(" Platform"),(0,s._)("span",{class:"token punctuation"},"."),(0,s._)("span",{class:"token function"},"parseSSR"),(0,s._)("span",{class:"token punctuation"},"("),(0,s.Uk)("ssrContext"),(0,s._)("span",{class:"token punctuation"},")"),(0,s.Uk)("\n    "),(0,s._)("span",{class:"token operator"},":"),(0,s.Uk)(" Platform "),(0,s._)("span",{class:"token comment"},"// otherwise we're on client"),(0,s.Uk)("\n\n  "),(0,s._)("span",{class:"token comment"},"// platform is equivalent to the global import as in non-SSR builds"),(0,s.Uk)("\n"),(0,s._)("span",{class:"token punctuation"},"}"),(0,s.Uk)("\n")])],-1),k=(0,s.Uk)("The "),p=(0,s._)("code",{class:"doc-token"},"ssrContext",-1),u=(0,s.Uk)(" is available in the "),h=(0,s.Uk)("Boot Files"),m=(0,s.Uk)(" or the "),g=(0,s.Uk)("PreFetch Feature"),_=(0,s.Uk)(", where it is supplied as a parameter."),U=(0,s.Uk)("There is a good reason for this. In a client-only app, every user will be using a fresh instance of the app in their browser. For server-side rendering we want the same thing. Each request should have a fresh, isolated app instance so that there is no cross-request state pollution. So "),f=(0,s.Uk)("Platform"),w=(0,s.Uk)(" and "),y=(0,s.Uk)("Cookies"),v=(0,s.Uk)(" need to be bound to each request separately."),b=(0,s.Uk)("Also a good idea is to read the "),S=(0,s.Uk)("Writing Universal Code"),q=(0,s.Uk)(" documentation page."),C=(0,s._)("p",null,"When running the code on server-side, the storage facilities can’t work. Web Storage is a browser only API.",-1);function W(e,o,n,W,T,P){const H=(0,s.up)("doc-link"),R=(0,s.up)("doc-page");return(0,s.wg)(),(0,s.j4)(R,{"meta-title":W.metaTitle,title:"SSR FAQ","meta-desc":W.metaDesc},{default:(0,s.w5)((()=>[(0,s._)("h2",{id:"why-am-i-getting-hydration-errors-",class:"doc-heading doc-h2",onClick:o[0]||(o[0]=e=>W.copyHeading("why-am-i-getting-hydration-errors-"))},"Why am I getting hydration errors?"),(0,s._)("p",null,[t,(0,s.Wm)(H,{to:"/quasar-cli/developing-ssr/client-side-hydration"},{default:(0,s.w5)((()=>[a])),_:1}),r,(0,s.Wm)(H,{to:"/vue-components/no-ssr"},{default:(0,s.w5)((()=>[i])),_:1}),l]),(0,s._)("h2",{id:"why-doesn’t-importing-platform-and-cookies-work-",class:"doc-heading doc-h2",onClick:o[1]||(o[1]=e=>W.copyHeading("why-doesn’t-importing-platform-and-cookies-work-"))},"Why doesn’t importing Platform and Cookies work?"),c,d,(0,s._)("p",null,[k,p,u,(0,s.Wm)(H,{to:"/quasar-cli/boot-files"},{default:(0,s.w5)((()=>[h])),_:1}),m,(0,s.Wm)(H,{to:"/quasar-cli/prefetch-feature"},{default:(0,s.w5)((()=>[g])),_:1}),_]),(0,s._)("p",null,[U,(0,s.Wm)(H,{to:"/options/platform-detection"},{default:(0,s.w5)((()=>[f])),_:1}),w,(0,s.Wm)(H,{to:"/quasar-plugins/cookies"},{default:(0,s.w5)((()=>[y])),_:1}),v]),(0,s._)("p",null,[b,(0,s.Wm)(H,{to:"/quasar-cli/developing-ssr/writing-universal-code"},{default:(0,s.w5)((()=>[S])),_:1}),q]),(0,s._)("h2",{id:"why-isn’t-localstorage-and-sessionstorage-working-",class:"doc-heading doc-h2",onClick:o[2]||(o[2]=e=>W.copyHeading("why-isn’t-localstorage-and-sessionstorage-working-"))},"Why isn’t LocalStorage and SessionStorage working?"),C])),_:1},8,["meta-title","meta-desc"])}var T=n(17536);const P={name:"DocMarkdownPage",setup(){return{metaTitle:"SSR FAQ",metaDesc:"Tips and tricks for a Quasar server-side rendered app.",copyHeading:T.Et}}};var H=n(74260);const R=(0,H.Z)(P,[["render",W]]),F=R}}]);