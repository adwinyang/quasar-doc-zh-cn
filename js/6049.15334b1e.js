"use strict";(globalThis["webpackChunkquasar_dev"]=globalThis["webpackChunkquasar_dev"]||[]).push([[6049],{6049:(e,o,l)=>{l.r(o),l.d(o,{default:()=>j});var t=l(83673);const a=(0,t._)("p",null,[(0,t.Uk)("The QField component is used to provide common functionality and aspect to form components. It uses "),(0,t._)("code",{class:"doc-token"},":model-value"),(0,t.Uk)(" (or "),(0,t._)("code",{class:"doc-token"},"v-model"),(0,t.Uk)(" if you want to use "),(0,t._)("code",{class:"doc-token"},"clearable"),(0,t.Uk)(" property) to have knowledge of the model of the component inside. It has support for labels, hints, errors, validation, and comes in a variety of styles and colors.")],-1),n=(0,t._)("p",null,[(0,t.Uk)("QField allows you to display any form control (or almost anything as a matter of fact) inside it. Just place your desired content inside the "),(0,t._)("code",{class:"doc-token"},"control"),(0,t.Uk)(" slot.")],-1),s=(0,t._)("div",{class:"doc-note doc-note--danger"},[(0,t._)("p",{class:"doc-note__title"},"WARNING"),(0,t._)("p",null,"Do NOT wrap QInput, QFile or QSelect with QField as these components already inherit QField.")],-1),d=(0,t._)("div",{class:"doc-note doc-note--tip"},[(0,t._)("p",{class:"doc-note__title"},"TIP"),(0,t._)("p",null,"The examples below use dumb content (text) just to show you the design that QField can use. For checking out examples that wrap real components, see the “Basic Features” section.")],-1),i=(0,t._)("div",{class:"doc-note doc-note--danger"},[(0,t._)("p",{class:"doc-note__title"},"WARNING"),(0,t._)("p",null,[(0,t.Uk)("QField does not (and should not) manage your "),(0,t._)("code",{class:"doc-token"},"control"),(0,t.Uk)(" slot, so if you use "),(0,t._)("code",{class:"doc-token"},"label"),(0,t.Uk)(" prop, it might be a good idea to also specify "),(0,t._)("code",{class:"doc-token"},"stack-label"),(0,t.Uk)(", otherwise it might overlap your control when QField is not focused.")])],-1),c=(0,t._)("p",null,[(0,t.Uk)("For your QField you can use only one of the main designs ("),(0,t._)("code",{class:"doc-token"},"filled"),(0,t.Uk)(", "),(0,t._)("code",{class:"doc-token"},"outlined"),(0,t.Uk)(", "),(0,t._)("code",{class:"doc-token"},"standout"),(0,t.Uk)(", "),(0,t._)("code",{class:"doc-token"},"borderless"),(0,t.Uk)("). You cannot use multiple as they are self-exclusive.")],-1),r=(0,t._)("p",null,"One of the most appropriate use cases for Standout design is in a QToolbar:",-1),u=(0,t._)("p",null,[(0,t.Uk)("The "),(0,t._)("code",{class:"doc-token"},"borderless"),(0,t.Uk)(" design allows you to seamlessly integrate your QField into other components without QField drawing a border around itself or changing its background color:")],-1),p=(0,t._)("p",null,[(0,t.Uk)("The "),(0,t._)("code",{class:"doc-token"},"rounded"),(0,t.Uk)(" prop only works along with Filled, Outlined and Standout designs, as showcased in the example below:")],-1),h=(0,t._)("p",null,[(0,t.Uk)("The "),(0,t._)("code",{class:"doc-token"},"square"),(0,t.Uk)(" prop only makes sense along with Filled, Outlined and Standout designs, as showcased in the example below:")],-1),k=(0,t._)("p",null,[(0,t.Uk)("As a helper, you can use "),(0,t._)("code",{class:"doc-token"},"clearable"),(0,t.Uk)(" prop so user can reset model to "),(0,t._)("code",{class:"doc-token"},"null"),(0,t.Uk)(" through an appended icon.")],-1),_=(0,t._)("div",{class:"doc-note doc-note--warning"},[(0,t._)("p",{class:"doc-note__title"},"WARNING"),(0,t._)("p",null,[(0,t.Uk)("If using "),(0,t._)("code",{class:"doc-token"},"clearable"),(0,t.Uk)(" you must use "),(0,t._)("code",{class:"doc-token"},"v-model"),(0,t.Uk)(" or listen on "),(0,t._)("code",{class:"doc-token"},"@update:model-value"),(0,t.Uk)(" and update the value.")])],-1),g=(0,t._)("p",null,[(0,t.Uk)("Anything you place inside the "),(0,t._)("code",{class:"doc-token"},"control"),(0,t.Uk)(" slot will be used as content of the field. We provide a few examples of controls below.")],-1),m=(0,t._)("div",{class:"doc-note doc-note--tip"},[(0,t._)("p",{class:"doc-note__title"},"TIP"),(0,t._)("p",null,[(0,t.Uk)("Most of the form controls always render something visible, so you if you’re using a "),(0,t._)("code",{class:"doc-token"},"label"),(0,t.Uk)(" then you might want to set it along with "),(0,t._)("code",{class:"doc-token"},"stack-label"),(0,t.Uk)(", otherwise the label will overlap the enclosed control.")])],-1),y=(0,t._)("p",null,[(0,t.Uk)("Using the "),(0,t._)("code",{class:"doc-token"},"label"),(0,t.Uk)(" slot you can customize the aspect of the label or add special features as "),(0,t._)("code",{class:"doc-token"},"QTooltip"),(0,t.Uk)(".")],-1),f=(0,t._)("div",{class:"doc-note doc-note--tip"},[(0,t._)("p",{class:"doc-note__title"},"TIP"),(0,t._)("p",null,[(0,t.Uk)("Do not forget to set the "),(0,t._)("code",{class:"doc-token"},"label-slot"),(0,t.Uk)(" property.")]),(0,t._)("p",null,[(0,t.Uk)("If you want to interact with the content of the label (QTooltip) add the "),(0,t._)("code",{class:"doc-token"},"all-pointer-events"),(0,t.Uk)(" class on the element in the slot.")])],-1),b=(0,t._)("div",{class:"doc-note doc-note--warning"},[(0,t._)("p",{class:"doc-note__title"},"WARNING"),(0,t._)("p",null,[(0,t.Uk)("When placing a QBtn with type “submit” in one of the “before”, “after”, “prepend”, or “append” slots of a QField, QInput or QSelect, you should also add a "),(0,t._)("code",{class:"doc-token"},"@click"),(0,t.Uk)(" listener on the QBtn in question. This listener should call the method that submits your form. All “click” events in such slots are not propagated to their parent elements.")])],-1),U=(0,t._)("p",null,[(0,t.Uk)("You can validate QField components with "),(0,t._)("code",{class:"doc-token"},":rules"),(0,t.Uk)(" prop. Specify array of embedded rules or your own validators. Your custom validator will be a function which returns "),(0,t._)("code",{class:"doc-token"},"true"),(0,t.Uk)(" if validator succeeds or "),(0,t._)("code",{class:"doc-token"},"String"),(0,t.Uk)(" with error message if it doesn’t succeed.")],-1),v=(0,t._)("div",{class:"doc-note doc-note--tip"},[(0,t._)("p",{class:"doc-note__title"},"TIP"),(0,t._)("p",null,[(0,t.Uk)("By default, for perf reasons, a change in the rules does not trigger a new validation until the model changes. In order to trigger the validation when rules change too, then use "),(0,t._)("code",{class:"doc-token"},"reactive-rules"),(0,t.Uk)(" Boolean prop. The downside is a performance penalty (so use it when you really need this only!) and it can be slightly mitigated by using a computed prop as value for the rules (and not specify them inline in the vue template).")])],-1),w=(0,t._)("p",null,"This is so you can write convenient rules of shape like:",-1),F=(0,t._)("pre",{class:"doc-code language-js"},[(0,t._)("code",{class:"doc-code__inner doc-code__inner--prerendered language-js"},[(0,t._)("span",{class:"token parameter"},"value"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" condition "),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(" errorMessage\n")])],-1),Q=(0,t._)("p",null,"For example:",-1),C=(0,t._)("pre",{class:"doc-code language-js"},[(0,t._)("code",{class:"doc-code__inner doc-code__inner--prerendered language-js"},[(0,t._)("span",{class:"token parameter"},"value"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(" value "),(0,t._)("span",{class:"token operator"},"<"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"10"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'Value should be lower'"),(0,t.Uk)("\n")])],-1),W=(0,t._)("p",null,[(0,t.Uk)("You can reset the validation by calling "),(0,t._)("code",{class:"doc-token"},"resetValidation()"),(0,t.Uk)(" method on the QField.")],-1),x=(0,t._)("p",null,[(0,t.Uk)("If you set "),(0,t._)("code",{class:"doc-token"},"lazy-rules"),(0,t.Uk)(", validation starts after first blur. If "),(0,t._)("code",{class:"doc-token"},"lazy-rules"),(0,t.Uk)(" is set to "),(0,t._)("code",{class:"doc-token"},"ondemand"),(0,t.Uk)(" String, then validation will be triggered only when component’s validate() method is manually called or when the wrapper QForm submits itself.")],-1),T=(0,t._)("p",null,"Rules can be async too, by using async/await or by directly returning a Promise.",-1),H=(0,t._)("div",{class:"doc-note doc-note--tip"},[(0,t._)("p",{class:"doc-note__title"},"TIP"),(0,t._)("p",null,[(0,t.Uk)("Consider coupling async rules with "),(0,t._)("code",{class:"doc-token"},"debounce"),(0,t.Uk)(" prop to avoid calling the async rules immediately on each keystroke, which might be detrimental to performance.")])],-1),S=(0,t._)("p",null,[(0,t.Uk)("You can also use external validation and only pass "),(0,t._)("code",{class:"doc-token"},"error"),(0,t.Uk)(" and "),(0,t._)("code",{class:"doc-token"},"error-message"),(0,t.Uk)(" (enable "),(0,t._)("code",{class:"doc-token"},"bottom-slots"),(0,t.Uk)(" to display this error message).")],-1),I={class:"doc-note doc-note--tip"},D=(0,t._)("p",{class:"doc-note__title"},"TIP",-1),q=(0,t.Uk)("Depending on your needs, you might connect "),B=(0,t.Uk)("Vuelidate"),P=(0,t.Uk)(" (our recommended approach) or some other validation library to QField."),V=(0,t._)("p",null,"You can also customize the slot for error message:",-1);function A(e,o,l,A,O,N){const R=(0,t.up)("doc-api"),L=(0,t.up)("doc-example"),j=(0,t.up)("doc-link"),z=(0,t.up)("doc-page");return(0,t.wg)(),(0,t.j4)(z,{"meta-title":A.metaTitle,title:"Field","meta-desc":A.metaDesc},{default:(0,t.w5)((()=>[a,n,s,(0,t._)("h2",{id:"qfield-api",class:"doc-heading doc-h2",onClick:o[0]||(o[0]=e=>A.copyHeading("qfield-api"))},"QField API"),(0,t.Wm)(R,{file:"QField"}),(0,t._)("h2",{id:"design",class:"doc-heading doc-h2",onClick:o[1]||(o[1]=e=>A.copyHeading("design"))},"Design"),d,i,(0,t._)("h3",{id:"overview",class:"doc-heading doc-h3",onClick:o[2]||(o[2]=e=>A.copyHeading("overview"))},"Overview"),c,(0,t.Wm)(L,{title:"Design Overview",file:"QField/DesignOverview"}),(0,t._)("h3",{id:"coloring",class:"doc-heading doc-h3",onClick:o[3]||(o[3]=e=>A.copyHeading("coloring"))},"Coloring"),(0,t.Wm)(L,{title:"Coloring",file:"QField/Coloring"}),(0,t._)("h3",{id:"standard",class:"doc-heading doc-h3",onClick:o[4]||(o[4]=e=>A.copyHeading("standard"))},"Standard"),(0,t.Wm)(L,{title:"Standard",file:"QField/DesignStandard"}),(0,t._)("h3",{id:"filled",class:"doc-heading doc-h3",onClick:o[5]||(o[5]=e=>A.copyHeading("filled"))},"Filled"),(0,t.Wm)(L,{title:"Filled",file:"QField/DesignFilled"}),(0,t._)("h3",{id:"outlined",class:"doc-heading doc-h3",onClick:o[6]||(o[6]=e=>A.copyHeading("outlined"))},"Outlined"),(0,t.Wm)(L,{title:"Outlined",file:"QField/DesignOutlined"}),(0,t._)("h3",{id:"standout",class:"doc-heading doc-h3",onClick:o[7]||(o[7]=e=>A.copyHeading("standout"))},"Standout"),(0,t.Wm)(L,{title:"Standout",file:"QField/DesignStandout"}),r,(0,t.Wm)(L,{title:"Standout in QToolbar",file:"QField/StandoutToolbar"}),(0,t._)("h3",{id:"borderless",class:"doc-heading doc-h3",onClick:o[8]||(o[8]=e=>A.copyHeading("borderless"))},"Borderless"),u,(0,t.Wm)(L,{title:"Borderless",file:"QField/Borderless"}),(0,t._)("h3",{id:"rounded-design",class:"doc-heading doc-h3",onClick:o[9]||(o[9]=e=>A.copyHeading("rounded-design"))},"Rounded design"),p,(0,t.Wm)(L,{title:"Rounded",file:"QField/Rounded"}),(0,t._)("h3",{id:"square-borders",class:"doc-heading doc-h3",onClick:o[10]||(o[10]=e=>A.copyHeading("square-borders"))},"Square borders"),h,(0,t.Wm)(L,{title:"Square borders",file:"QField/SquareBorders"}),(0,t._)("h3",{id:"dark-background",class:"doc-heading doc-h3",onClick:o[11]||(o[11]=e=>A.copyHeading("dark-background"))},"Dark background"),(0,t.Wm)(L,{title:"Dark",file:"QField/Dark",dark:""}),(0,t._)("h2",{id:"basic-features",class:"doc-heading doc-h2",onClick:o[12]||(o[12]=e=>A.copyHeading("basic-features"))},"Basic features"),(0,t._)("h3",{id:"clearable",class:"doc-heading doc-h3",onClick:o[13]||(o[13]=e=>A.copyHeading("clearable"))},"Clearable"),k,_,(0,t.Wm)(L,{title:"Clearable",file:"QField/Clearable"}),(0,t._)("h3",{id:"control-types",class:"doc-heading doc-h3",onClick:o[14]||(o[14]=e=>A.copyHeading("control-types"))},"Control types"),g,(0,t.Wm)(L,{title:"Control types",file:"QField/ControlTypes"}),m,(0,t._)("h3",{id:"prefix-and-suffix",class:"doc-heading doc-h3",onClick:o[15]||(o[15]=e=>A.copyHeading("prefix-and-suffix"))},"Prefix and suffix"),(0,t.Wm)(L,{title:"Prefix and suffix",file:"QField/PrefixSuffix"}),(0,t._)("h3",{id:"custom-label",class:"doc-heading doc-h3",onClick:o[16]||(o[16]=e=>A.copyHeading("custom-label"))},"Custom Label"),y,f,(0,t.Wm)(L,{title:"Custom label",file:"QField/CustomLabel"}),(0,t._)("h3",{id:"slots-with-qbtn-type-“submit”",class:"doc-heading doc-h3",onClick:o[17]||(o[17]=e=>A.copyHeading("slots-with-qbtn-type-“submit”"))},"Slots with QBtn type “submit”"),b,(0,t._)("h3",{id:"loading-state",class:"doc-heading doc-h3",onClick:o[18]||(o[18]=e=>A.copyHeading("loading-state"))},"Loading state"),(0,t.Wm)(L,{title:"Loading state",file:"QField/LoadingState"}),(0,t._)("h2",{id:"validation",class:"doc-heading doc-h2",onClick:o[19]||(o[19]=e=>A.copyHeading("validation"))},"Validation"),(0,t._)("h3",{id:"internal-validation",class:"doc-heading doc-h3",onClick:o[20]||(o[20]=e=>A.copyHeading("internal-validation"))},"Internal validation"),U,v,w,F,Q,C,W,(0,t.Wm)(L,{title:"Basic",file:"QField/ValidationRequired"}),(0,t.Wm)(L,{title:"Maximum value",file:"QField/ValidationMaxValue"}),x,(0,t.Wm)(L,{title:"Lazy rules",file:"QField/ValidationLazy"}),(0,t._)("h4",{id:"async-rules",class:"doc-heading doc-h4",onClick:o[21]||(o[21]=e=>A.copyHeading("async-rules"))},"Async rules"),T,H,(0,t.Wm)(L,{title:"Async rules",file:"QField/ValidationAsync"}),(0,t._)("h3",{id:"external-validation",class:"doc-heading doc-h3",onClick:o[22]||(o[22]=e=>A.copyHeading("external-validation"))},"External validation"),S,(0,t._)("div",I,[D,(0,t._)("p",null,[q,(0,t.Wm)(j,{to:"https://vuelidate.netlify.com/"},{default:(0,t.w5)((()=>[B])),_:1}),P])]),(0,t.Wm)(L,{title:"External",file:"QField/ValidationExternal"}),V,(0,t.Wm)(L,{title:"Slot for error message",file:"QField/ValidationSlots"})])),_:1},8,["meta-title","meta-desc"])}var O=l(17536);const N={name:"DocMarkdownPage",setup(){return{metaTitle:"Field",metaDesc:"The QField Vue component is used to provide common functionality and aspect to form components.",copyHeading:O.Et}}};var R=l(74260);const L=(0,R.Z)(N,[["render",A]]),j=L}}]);