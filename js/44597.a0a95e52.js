"use strict";(globalThis["webpackChunkquasar_dev"]=globalThis["webpackChunkquasar_dev"]||[]).push([[44597],{44597:(e,t,a)=>{a.r(t),a.d(t,{default:()=>g});var n=a(83673);const o=(0,n._)("p",null,"Hydration refers to the client-side process during which Vue takes over the static HTML sent by the server and turns it into dynamic DOM that can react to client-side data changes.",-1),s=(0,n._)("p",null,"Since the server has already rendered the markup, we obviously do not want to throw that away and re-create all the DOM elements. Instead, we want to “hydrate” the static markup and make it interactive.",-1),l=(0,n._)("div",{class:"doc-note doc-note--warning"},[(0,n._)("p",{class:"doc-note__title"},"WARNING"),(0,n._)("p",null,[(0,n.Uk)("In development mode, Vue will assert the client-side generated virtual DOM tree matches the DOM structure rendered from the server. If there is a mismatch, it will bail hydration, discard existing DOM and render from scratch. "),(0,n._)("strong",null,"In production mode, this assertion is disabled for maximum performance.")])],-1),r=(0,n._)("p",null,"One thing to be aware of when using SSR + client hydration is some special HTML structures that may be altered by the browser. For example, when you write this in a Vue template:",-1),i=(0,n._)("pre",{class:"doc-code language-html"},[(0,n._)("code",{class:"doc-code__inner doc-code__inner--prerendered language-html"},[(0,n._)("span",{class:"token tag"},[(0,n._)("span",{class:"token tag"},[(0,n._)("span",{class:"token punctuation"},"<"),(0,n.Uk)("table")]),(0,n._)("span",{class:"token punctuation"},">")]),(0,n.Uk)("\n  "),(0,n._)("span",{class:"token tag"},[(0,n._)("span",{class:"token tag"},[(0,n._)("span",{class:"token punctuation"},"<"),(0,n.Uk)("tr")]),(0,n._)("span",{class:"token punctuation"},">")]),(0,n._)("span",{class:"token tag"},[(0,n._)("span",{class:"token tag"},[(0,n._)("span",{class:"token punctuation"},"<"),(0,n.Uk)("td")]),(0,n._)("span",{class:"token punctuation"},">")]),(0,n.Uk)("hi"),(0,n._)("span",{class:"token tag"},[(0,n._)("span",{class:"token tag"},[(0,n._)("span",{class:"token punctuation"},"</"),(0,n.Uk)("td")]),(0,n._)("span",{class:"token punctuation"},">")]),(0,n._)("span",{class:"token tag"},[(0,n._)("span",{class:"token tag"},[(0,n._)("span",{class:"token punctuation"},"</"),(0,n.Uk)("tr")]),(0,n._)("span",{class:"token punctuation"},">")]),(0,n.Uk)("\n"),(0,n._)("span",{class:"token tag"},[(0,n._)("span",{class:"token tag"},[(0,n._)("span",{class:"token punctuation"},"</"),(0,n.Uk)("table")]),(0,n._)("span",{class:"token punctuation"},">")]),(0,n.Uk)("\n")])],-1),c=(0,n._)("p",null,[(0,n.Uk)("The browser will automatically inject "),(0,n._)("code",{class:"doc-token"},"<tbody>"),(0,n.Uk)(" inside "),(0,n._)("code",{class:"doc-token"},"<table>"),(0,n.Uk)(", however, the virtual DOM generated by Vue does not contain "),(0,n._)("code",{class:"doc-token"},"<tbody>"),(0,n.Uk)(", so it will cause a mismatch. To ensure correct matching, make sure to write valid HTML in your templates.")],-1),d=(0,n._)("p",null,"If you do receive hydration errors (as seen in console: “Vuejs Error - The client-side rendered virtual DOM tree is not matching server-rendered content”), you can try following these steps:",-1),u=(0,n._)("ol",null,[(0,n._)("li",null,"Show DevTools in Chrome (F12)"),(0,n._)("li",null,"Load the page that causes “the client-side rendered virtual DOM tree…” warning."),(0,n._)("li",null,"Scroll to the warning in DevTools console."),(0,n._)("li",null,"Click at the source location hyperlink of the warning in vue.runtime.esm.js."),(0,n._)("li",null,"Set a breakpoint there (left-clicking at line number in the source code browser)."),(0,n._)("li",null,[(0,n.Uk)("Make the same warning appear again. Usually by reloading the page. If there are many warnings, you can check the message by moving a mouse over "),(0,n._)("code",{class:"doc-token"},"msg"),(0,n.Uk)(" variable.")]),(0,n._)("li",null,[(0,n.Uk)("When you have found your message and stopped on a breakpoint, look at the "),(0,n._)("em",null,"call stack"),(0,n.Uk)(". Click one frame down to call to “patch” to open its source. Hover mouse over hydrate function call 4 lines above the execution line in patch. Hyperlink to the source of hydrate would open.")]),(0,n._)("li",null,[(0,n.Uk)("In the hydrate function, move about 15 lines from the start and set a breakpoint where false is returned after "),(0,n._)("code",{class:"doc-token"},"assertNodeMatch"),(0,n.Uk)(" returned "),(0,n._)("code",{class:"doc-token"},"false"),(0,n.Uk)(". Set the breakpoint there and remove all other breakpoints.")]),(0,n._)("li",null,[(0,n.Uk)("Make the same warning happen again. Now, when breakpoint is hit, execution should stop in the hydrate function. Switch to DevTools console and evaluate "),(0,n._)("code",{class:"doc-token"},"elm"),(0,n.Uk)(" and then "),(0,n._)("code",{class:"doc-token"},"vnode"),(0,n.Uk)(". Here "),(0,n._)("code",{class:"doc-token"},"elm"),(0,n.Uk)(" seems to be a "),(0,n._)("em",null,"server-rendered DOM element"),(0,n.Uk)(" while "),(0,n._)("code",{class:"doc-token"},"vnode"),(0,n.Uk)(" is a "),(0,n._)("em",null,"virtual DOM node"),(0,n.Uk)(". "),(0,n._)("code",{class:"doc-token"},"Elm"),(0,n.Uk)(" is printed as HTML so you can figure out where the error happened.")])],-1);function h(e,t,a,h,k,p){const _=(0,n.up)("doc-page");return(0,n.wg)(),(0,n.j4)(_,{"meta-title":h.metaTitle,title:"Client Side Hydration","meta-desc":h.metaDesc},{default:(0,n.w5)((()=>[o,s,l,(0,n._)("h2",{id:"hydration-caveats",class:"doc-heading doc-h2",onClick:t[0]||(t[0]=e=>h.copyHeading("hydration-caveats"))},"Hydration Caveats"),r,i,c,(0,n._)("h2",{id:"handling-hydration-errors",class:"doc-heading doc-h2",onClick:t[1]||(t[1]=e=>h.copyHeading("handling-hydration-errors"))},"Handling Hydration Errors"),d,u])),_:1},8,["meta-title","meta-desc"])}var k=a(17536);const p={name:"DocMarkdownPage",setup(){return{metaTitle:"Client Side Hydration",metaDesc:"What hydration is and its caveats in a Quasar server-side rendered app.",copyHeading:k.Et}}};var _=a(74260);const m=(0,_.Z)(p,[["render",h]]),g=m}}]);