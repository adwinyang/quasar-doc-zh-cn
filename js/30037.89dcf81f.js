"use strict";(globalThis["webpackChunkquasar_dev"]=globalThis["webpackChunkquasar_dev"]||[]).push([[30037],{30037:(e,n,t)=>{t.r(n),t.d(n,{default:()=>x});var a=t(83673);const o=(0,a._)("p",null,[(0,a.Uk)("Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: "),(0,a._)("code",{class:"doc-token"},"v-touch-pan"),(0,a.Uk)(", "),(0,a._)("code",{class:"doc-token"},"v-touch-swipe"),(0,a.Uk)(", "),(0,a._)("code",{class:"doc-token"},"v-touch-hold"),(0,a.Uk)(" and even "),(0,a._)("code",{class:"doc-token"},"v-touch-repeat"),(0,a.Uk)(".")],-1),s=(0,a._)("blockquote",{class:"doc-note"},[(0,a._)("p",null,[(0,a._)("strong",null,"These directives also work with mouse events, not only touch events"),(0,a.Uk)(", so you are able to build cool functionality for your App on desktops too.")])],-1),c=(0,a._)("p",null,[(0,a.Uk)("We will be describing "),(0,a._)("code",{class:"doc-token"},"v-touch-pan"),(0,a.Uk)(" on the lines below.")],-1),l=(0,a._)("p",null,"Click then pan in a direction with your mouse on the area below to see it in action. Page scrolling is prevented, but you can opt out if you wish.",-1),i=(0,a._)("div",{class:"doc-note doc-note--tip"},[(0,a._)("p",{class:"doc-note__title"},"TIP"),(0,a._)("p",null,[(0,a.Uk)("If your content also has images, you might want to add "),(0,a._)("code",{class:"doc-token"},'draggable="false"'),(0,a.Uk)(" to them, otherwise the native browser behavior might interfere in a negative way.")])],-1),u=(0,a._)("p",null,"Panning works both with a mouse or a native touch action. You can also capture pan to certain directions (any) only as you’ll see below.",-1),p=(0,a._)("p",null,"Example on capturing only horizontal panning. Notice that on touch capable devices the scrolling is automatically not blocked, since we are only capturing horizontally.",-1),d=(0,a._)("p",null,"Example on capturing only vertically panning. Page scrolling is prevented, but you can opt out if you wish.",-1),r=(0,a._)("p",null,[(0,a.Uk)("Example on capturing panning on custom directions. For this, use modifiers: "),(0,a._)("code",{class:"doc-token"},"up"),(0,a.Uk)(", "),(0,a._)("code",{class:"doc-token"},"down"),(0,a.Uk)(", "),(0,a._)("code",{class:"doc-token"},"left"),(0,a.Uk)(", "),(0,a._)("code",{class:"doc-token"},"right"),(0,a.Uk)(". Page scrolling is prevented, but you can opt out if you wish.")],-1),h=(0,a._)("p",null,[(0,a.Uk)("When you want to handle mouse events too, use the "),(0,a._)("code",{class:"doc-token"},"mouse"),(0,a.Uk)(" modifier:")],-1),k=(0,a._)("pre",{class:"doc-code language-html"},[(0,a._)("code",{class:"doc-code__inner doc-code__inner--prerendered language-html"},[(0,a._)("span",{class:"token comment"},"\x3c!--\n  directive will also be triggered by mouse actions\n--\x3e"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token punctuation"},"<"),(0,a.Uk)("div")]),(0,a.Uk)(),(0,a._)("span",{class:"token attr-name"},"v-touch-pan.mouse"),(0,a._)("span",{class:"token attr-value"},[(0,a._)("span",{class:"token punctuation attr-equals"},"="),(0,a._)("span",{class:"token punctuation"},'"'),(0,a.Uk)("userHasPanned"),(0,a._)("span",{class:"token punctuation"},'"')]),(0,a._)("span",{class:"token punctuation"},">")]),(0,a.Uk)("..."),(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token punctuation"},"</"),(0,a.Uk)("div")]),(0,a._)("span",{class:"token punctuation"},">")]),(0,a.Uk)("\n")])],-1),g=(0,a._)("p",null,[(0,a.Uk)("By default, the directive does not block page scrolling. If you want to prevent scrolling, then use the "),(0,a._)("code",{class:"doc-token"},"prevent"),(0,a.Uk)(" modifier.")],-1),_=(0,a._)("pre",{class:"doc-code language-html"},[(0,a._)("code",{class:"doc-code__inner doc-code__inner--prerendered language-html"},[(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token punctuation"},"<"),(0,a.Uk)("div")]),(0,a.Uk)(),(0,a._)("span",{class:"token attr-name"},"v-touch-pan.prevent"),(0,a._)("span",{class:"token attr-value"},[(0,a._)("span",{class:"token punctuation attr-equals"},"="),(0,a._)("span",{class:"token punctuation"},'"'),(0,a.Uk)("userHasPanned"),(0,a._)("span",{class:"token punctuation"},'"')]),(0,a._)("span",{class:"token punctuation"},">")]),(0,a.Uk)("..."),(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token punctuation"},"</"),(0,a.Uk)("div")]),(0,a._)("span",{class:"token punctuation"},">")]),(0,a.Uk)("\n")])],-1),m=(0,a._)("p",null,[(0,a.Uk)("When you want to inhibit TouchPan, you can do so by stopping propagation of the "),(0,a._)("code",{class:"doc-token"},"touchstart"),(0,a.Uk)("/"),(0,a._)("code",{class:"doc-token"},"mousedown"),(0,a.Uk)(" events from the inner content:")],-1),v=(0,a._)("pre",{class:"doc-code language-html"},[(0,a._)("code",{class:"doc-code__inner doc-code__inner--prerendered language-html"},[(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token punctuation"},"<"),(0,a.Uk)("div")]),(0,a.Uk)(),(0,a._)("span",{class:"token attr-name"},"v-touch-pan.mouse"),(0,a._)("span",{class:"token attr-value"},[(0,a._)("span",{class:"token punctuation attr-equals"},"="),(0,a._)("span",{class:"token punctuation"},'"'),(0,a.Uk)("userHasHold"),(0,a._)("span",{class:"token punctuation"},'"')]),(0,a._)("span",{class:"token punctuation"},">")]),(0,a.Uk)("\n  "),(0,a._)("span",{class:"token comment"},"\x3c!-- ...content --\x3e"),(0,a.Uk)("\n  "),(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token punctuation"},"<"),(0,a.Uk)("div")]),(0,a.Uk)(),(0,a._)("span",{class:"token attr-name"},"@touchstart.stop"),(0,a.Uk)(),(0,a._)("span",{class:"token attr-name"},"@mousedown.stop"),(0,a._)("span",{class:"token punctuation"},">")]),(0,a.Uk)("\n    "),(0,a._)("span",{class:"token comment"},"\x3c!--\n      TouchPan will not apply here because\n      we are calling stopPropagation() on touchstart\n      and mousedown events\n    --\x3e"),(0,a.Uk)("\n  "),(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token punctuation"},"</"),(0,a.Uk)("div")]),(0,a._)("span",{class:"token punctuation"},">")]),(0,a.Uk)("\n  "),(0,a._)("span",{class:"token comment"},"\x3c!-- ...content --\x3e"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token tag"},[(0,a._)("span",{class:"token punctuation"},"</"),(0,a.Uk)("div")]),(0,a._)("span",{class:"token punctuation"},">")]),(0,a.Uk)("\n")])],-1),U=(0,a._)("p",null,[(0,a.Uk)("However, if you are using "),(0,a._)("code",{class:"doc-token"},"capture"),(0,a.Uk)(" or "),(0,a._)("code",{class:"doc-token"},"mouseCapture"),(0,a.Uk)(" modifiers then events will first reach the TouchPan directive then the inner content, so TouchPan will still trigger.")],-1),b=(0,a._)("p",null,"Below is a nice example on using TouchPan on a QFab. You can drag it across the screen.",-1),w=(0,a._)("p",null,"Due to performance reasons, not all of the modifiers are reactive. Some require a window/page/component refresh to get updated. Please check the API card for the modifiers which are not marked as reactive.",-1);function y(e,n,t,y,f,P){const T=(0,a.up)("doc-api"),H=(0,a.up)("doc-example"),x=(0,a.up)("doc-page");return(0,a.wg)(),(0,a.j4)(x,{"meta-title":y.metaTitle,title:"Touch Pan Directive",related:y.related,toc:y.toc,"meta-desc":y.metaDesc},{default:(0,a.w5)((()=>[o,s,c,(0,a._)("h2",{id:"touchpan-api",class:"doc-heading doc-h2",onClick:n[0]||(n[0]=e=>y.copyHeading("touchpan-api"))},"TouchPan API"),(0,a.Wm)(T,{file:"TouchPan"}),(0,a._)("h2",{id:"usage",class:"doc-heading doc-h2",onClick:n[1]||(n[1]=e=>y.copyHeading("usage"))},"Usage"),l,i,(0,a.Wm)(H,{title:"All directions",file:"TouchPan/Basic"}),u,p,(0,a.Wm)(H,{title:"Horizontally",file:"TouchPan/Horizontal"}),d,(0,a.Wm)(H,{title:"Vertically",file:"TouchPan/Vertical"}),r,(0,a.Wm)(H,{title:"Custom directions",file:"TouchPan/Custom"}),(0,a._)("h3",{id:"handling-mouse-events",class:"doc-heading doc-h3",onClick:n[2]||(n[2]=e=>y.copyHeading("handling-mouse-events"))},"Handling Mouse Events"),h,k,(0,a._)("h3",{id:"preventing-scroll-on-touch-capable-devices-",class:"doc-heading doc-h3",onClick:n[3]||(n[3]=e=>y.copyHeading("preventing-scroll-on-touch-capable-devices-"))},"Preventing Scroll (on touch capable devices)"),g,_,(0,a._)("h3",{id:"inhibiting-touchpan",class:"doc-heading doc-h3",onClick:n[4]||(n[4]=e=>y.copyHeading("inhibiting-touchpan"))},"Inhibiting TouchPan"),m,v,U,(0,a._)("h2",{id:"example-with-fab",class:"doc-heading doc-h2",onClick:n[5]||(n[5]=e=>y.copyHeading("example-with-fab"))},"Example with FAB"),b,(0,a.Wm)(H,{title:"Draggable",file:"QFab/Draggable"}),(0,a._)("h2",{id:"note-on-hmr",class:"doc-heading doc-h2",onClick:n[6]||(n[6]=e=>y.copyHeading("note-on-hmr"))},"Note on HMR"),w])),_:1},8,["meta-title","related","toc","meta-desc"])}var f=t(17536);const P={name:"DocMarkdownPage",setup(){return{metaTitle:"Touch Pan Directive",metaDesc:"Vue directive which triggers an event when the user drags the finger or mouse on a component or element.",related:[{name:"触摸轻扫",category:"Vue 指令",path:"/vue-directives/touch-swipe"},{name:"触摸保持",category:"Vue 指令",path:"/vue-directives/touch-hold"}],toc:[{id:"touchpan-api",title:"TouchPan API"},{id:"usage",title:"Usage"},{id:"handling-mouse-events",title:"Handling Mouse Events",sub:!0},{id:"preventing-scroll-on-touch-capable-devices-",title:"Preventing Scroll (on touch capable devices)",sub:!0},{id:"inhibiting-touchpan",title:"Inhibiting TouchPan",sub:!0},{id:"example-with-fab",title:"Example with FAB"},{id:"note-on-hmr",title:"Note on HMR"}],copyHeading:f.Et}}};var T=t(74260);const H=(0,T.Z)(P,[["render",y]]),x=H}}]);